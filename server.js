const express = require('express');
const { google } = require('googleapis');
const { GoogleAuth } = require('google-auth-library');
const bodyParser = require('body-parser');
require('dotenv').config();

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(express.json({ limit: '10mb' }));

// CORS headers for web requests
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// Health check endpoint for Cloud Run
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    service: 'google-sheets-writer'
  });
});

// Root endpoint info
app.get('/', (req, res) => {
  res.status(200).json({
    message: 'Google Sheets Writer API',
    endpoints: {
      'POST /': '–ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É',
      'GET /health': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞'
    },
    usage: {
      method: 'POST',
      body: {
        command: '–≤–ø–∏—à–∏',
        value: '–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏'
      }
    }
  });
});

// Main endpoint for writing data to Google Sheets
app.post('/', async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', JSON.stringify(req.body, null, 2));
  
  const { command, value } = req.body;

  // Validate input
  if (!command || !value) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ');
    return res.status(400).json({
      error: '–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ',
      required: {
        command: '—Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≤–ø–∏—à–∏")',
        value: '—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–ø–∏—Å–∏'
      }
    });
  }

  if (command !== '–≤–ø–∏—à–∏') {
    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command);
    return res.status(400).json({
      error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
      supportedCommands: ['–≤–ø–∏—à–∏'],
      received: command
    });
  }

  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Auth...');
    
    // Initialize Google Auth
    const auth = new GoogleAuth({
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      // If running on Cloud Run, this will use the default service account
      // If running locally, set GOOGLE_APPLICATION_CREDENTIALS environment variable
    });

    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });

    // Get spreadsheet ID from environment variable
    const spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;
    if (!spreadsheetId) {
      console.error('GOOGLE_SPREADSHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return res.status(500).json({
        error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        details: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_SPREADSHEET_ID'
      });
    }

    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏...');
    
    // Prepare data for insertion
    const timestamp = new Date().toISOString();
    const range = process.env.GOOGLE_SHEET_RANGE || '–õ–∏—Å—Ç1!A:C';
    const resource = {
      values: [[timestamp, command, String(value)]]
    };

    console.log('–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google –¢–∞–±–ª–∏—Ü—É...', {
      spreadsheetId: spreadsheetId.substring(0, 10) + '...',
      range,
      data: resource.values[0]
    });

    // Append data to the sheet
    const response = await sheets.spreadsheets.values.append({
      spreadsheetId,
      range,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      resource
    });

    console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã:', {
      updatedRange: response.data.updates.updatedRange,
      updatedRows: response.data.updates.updatedRows,
      updatedColumns: response.data.updates.updatedColumns,
      updatedCells: response.data.updates.updatedCells
    });

    res.status(200).json({
      success: true,
      message: '‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É',
      data: {
        timestamp,
        command,
        value,
        updatedRange: response.data.updates.updatedRange,
        updatedCells: response.data.updates.updatedCells
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É:', error);
    
    // Enhanced error handling
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É';
    let statusCode = 500;
    
    if (error.code === 403) {
      errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞';
      statusCode = 403;
    } else if (error.code === 404) {
      errorMessage = '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_SPREADSHEET_ID';
      statusCode = 404;
    } else if (error.message && error.message.includes('Unable to detect a Project Id')) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç';
      statusCode = 401;
    }
    
    res.status(statusCode).json({
      error: errorMessage,
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    timestamp: new Date().toISOString()
  });
});

// Handle 404
app.use((req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.path,
    method: req.method
  });
});

// Start server
const PORT = process.env.PORT || 8080;
const HOST = process.env.HOST || '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
  console.log(`üìä Google Spreadsheet ID: ${process.env.GOOGLE_SPREADSHEET_ID ? process.env.GOOGLE_SPREADSHEET_ID.substring(0, 10) + '...' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  console.log(`üìã –î–∏–∞–ø–∞–∑–æ–Ω –ª–∏—Å—Ç–∞: ${process.env.GOOGLE_SHEET_RANGE || '–õ–∏—Å—Ç1!A:C'}`);
  console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});
